type Query {
  me: User
  user(id: ID!): User
  users(
    first: Int
    last: Int
    before: String
    after: String
    query: String
    sortKey: UserSortKey! = ID
    reverse: Boolean! = false
  ): UserConnection!
}

enum UserSortKey {
  ID
  USERNAME
  EMAIL
  HEIGHT
}

type Mutation {
  userCreate(input: UserCreateInput): UserCreateResponse
  userUpdate(input: UserUpdateInput): UserUpdateResponse
}

input UserCreateInput {
  username: String!
  email: String!
  height: Int!
}

type UserCreateResponse {
  userErrors: [UserError!]!
  user: User
}

input UserUpdateInput {
  id: ID!
  username: String!
  email: String!
  height: Int!
}

type UserUpdateResponse {
  userErrors: [UserError!]!
  user: User
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  height: Int!
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}
