type Query {
  productRating(id: ID!): ProductRating
  productRatings( # TODO: implement sortKey
    first: Int
    last: Int
    before: String
    after: String
    query: String
  ): ProductRatingConnection!
}

type ProductRating implements Node {
  id: ID!
  title: String
  text: String
  ratingScore: Int! # Todo: make custom Scalar Type
  creatorIsVerifiedBuyer: Boolean!
  insertDate: String! # Todo: make custom Scalar Type
  lastActivityDate: String! # Todo: make custom Scalar Type
  votesSummary: ProductRatingVotesSummary!
  pros: [String!]
  cons: [String!]
}

type ProductRatingEdge implements Edge {
  cursor: String!
  node: ProductRating!
}

type ProductRatingConnection implements Connection {
  edges: [ProductRatingEdge!]!
  pageInfo: PageInfo!
}

type ProductRatingVotesSummary implements VotesSummary {
  upVoteCount: Int!
  downVoteCount: Int!
  abusiveVoteCount: Int!
  voteScore: Int!
  userVoteType: CommunityVoteType
}

# Summary
type ProductRatingsSummary {
  averageRating: Float!
  totalRatings: Int!
}

# Connections
extend type User {
  productRatings( # TODO: implement sortKey & query
    first: Int
    last: Int
    before: String
    after: String
  ): ProductRatingConnection!
}

extend type Product {
  productRatingsSummary: ProductRatingsSummary!
  productRatings( # TODO: implement sortKey & query
    first: Int
    last: Int
    before: String
    after: String
  ): ProductRatingConnection!
}
