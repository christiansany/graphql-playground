type Query {
  product(id: ID!): Product
  products(
    first: Int
    last: Int
    before: String
    after: String
    query: String
    sortKey: ProductSortKey! = ID
    reverse: Boolean! = false
  ): ProductConnection!
}

enum ProductSortKey {
  ID
  PRICE
}

type Product implements Node {
  id: ID!
  name: String!
  description: String!
  price: Float!
}

type ProductEdge implements Edge {
  cursor: String!
  node: Product!
}

type ProductConnection implements Connection {
  edges: [ProductEdge!]!
  pageInfo: PageInfo!
}

type Mutation {
  productCreate(input: ProductCreateInput): ProductCreateResponse
  productUpdate(input: ProductUpdateInput): ProductUpdateResponse
}

input ProductCreateInput {
  name: String!
  description: String!
  price: Int!
}

type ProductCreateResponse {
  userErrors: [UserError!]!
  product: Product
}

input ProductUpdateInput {
  id: ID!
  name: String
  description: String
  price: Int
}

type ProductUpdateResponse {
  userErrors: [UserError!]!
  product: Product
}
